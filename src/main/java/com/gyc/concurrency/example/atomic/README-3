第三章：线程安全性讲解
    线程安全性-原子性-atomic-1
        线程安装性
            定义：
                当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些进程如何交替执行，并且在主调代码中不需要任何额外的同步或协同，
                这个类都能表现出来的正确的行为，那么这个类是线程安全的
            体现：
                原子性：
                    提供了互斥访问，同一时刻只能有一个线程来对它进行操作
                可见性：
                    一个线程对主内存的修改可以及时的被其他线程观察到
                有序性:
                    一个线程观察其他线程中的指令执行顺序，由于指令重排序的出门证，该观察结果一般杂乱无序
        原子性-Atomic包
            AtomicXXX：
                CAS、Unsafe.compareAndSwapInt
            AtomicLong、LongAdder
                AtomicXXX 底层实现机制CAS，在死循环中不断的尝试修改目标值，直到修改成功，如果竞争不激烈时候，修改成功的概率很高，
                否则修改失败的概率很高，在大量修改失败的时候，这些原子操作就会进行多次循环尝试，因此性能会受到一些影响。对于普通
                long和double变量，jvm允许将64位的读操作或写操作拆成两个32位的操作。LongAdder的实现基于什么思想？其核心是将热点数据分离，
                比如可以将AtomicLong内部核心数据value分离成数组，每个线程访问时候通过hash等算法映射到其中一个数字进行计数，而最终的计
                数则为这个数组的求和累加。热点数据分离，提高并行度。LongAdder缺陷，如果有并发更新会存在统计误差。
             AtomicReference、  AtomicReferenceFieldUpdater
                这两个不经常使用
             AtomicStampReference：CAS的ABA问题
