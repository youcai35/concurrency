原子性-锁
    synchronized:依赖JVM
        修饰代码块:
            大括号括起来的代码，作用于调用的对象
        修饰方法：
            整个方法，作用于调用的对象
        修饰静态方法：
            整个静态方法，作用于所有对象
         修饰类：
            括号包括起来的部分，作用于所有对象
    Lock:依赖特殊的CPU指令，代码实现，ReentrantLock
原子性-对比
    synchronized:不可中断锁，适合竞争不激烈，可读性好
    lock：可中断锁，多样化同步，竞争激烈时能维持常态
    Atomic:竞争激烈时能维持常态，比Lock性能好；只能同步一个值

可见性
    导致共享变量在线程间不可见的原因
        线程交叉执行
        重排序结合线程交叉执行
        共享变量更新后的值没有在工作内存与主存间及时更新
    JMM关于synchronized的两条规定：
        线程解锁前，必须把共享变量的最新值刷新到主内存
        线程加锁时，将清空工作内存中共享变量值，从而使用共享变量时需要从主内存中重新读取最新的值(注意，加锁与解锁是同一把锁)
可见性-volatile
    通过加入内存屏障和禁止重排序优化来实现
        对volatile变量写操作时，会再写操作后加入一条store屏障指令，将本地内存中的共享变量值刷新到主内存
        对volatile变量读操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量

有序性
    Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程的执行，却会影响到多线程并发执行的正确性
    volatile、synchronized、Lock
    happens-before原则
        程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先发生于书写后面的操作
        锁规则：一个unlock操作先发生于后秒对同一个锁的lock操作
        volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作
        传递规则：如果操作A先行发生于操作B，而操作B又先发生于操作C，则可以得出操作A先发生于操作C
        线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作
        线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生
        线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行
        对象终结规则：一个对象的初始化完成先行发生于其他的finalize()方法开始
线程安全性-总结
    原子性：Atomic包、CAS算法、synchronized、Lock
    可见性：synchronized、volatile
    有序性：happens-before