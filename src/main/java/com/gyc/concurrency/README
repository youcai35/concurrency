基本概念
    并发:
        同时拥有两个或者多个线程，如果程序在单核处理器上运行，多个线程将交替地换入或者换出内存，这些线程是同时“存在”的，
        每个线程都处于执行过程中的某个状态，如果运行在多核处理器上，此时，程序中的每个线程都将分配到一个处理器核上，
        因此可以同时运行。
    高并发：
        高并发(High Concurrency)是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。
    并发：
        多个线程操作相同的资源，保证线程安全，合理使用资源
    高并发：
        服务能同时处理很多请求，提高程序性能

Java内存模型(Java Memory Model ，JMM)
    概述：
        Java内存模型是一种规范，它规范了Java虚拟机与计算机内存是如何协同工作的。它规定了一个线程如何和何时可以看到其他线程修改过的共享变量的值以及
        在必须时同步访问到共享变量。 
    堆与栈内存分配：
        堆:
            堆是Java运行时数据区，堆是由垃圾回收来负责的，堆的优势是可以动态的分配内存的大小，生存期也不用事先告诉编译器，因为他是在运行时动态分配内存的
            Java垃圾收集器会自动收走不在使用的垃圾数据，但是有缺点，由于是在运行时候动态分配内存，因此存取相对来说慢一些。
        栈：
            栈的优势是存取速度比堆块，仅次于计算机里边的寄存器。 栈的数据时可以共享的，但是他的缺点是存在栈中的数据大小与生存区是确定的，缺乏灵活性，存在一些
            基本类型的变量，比如：int、short、byte、long、double、char、 boolean 和对象句柄。Java内存模型要求调用栈和本地变量存在线程栈上，对象存放在堆上。
            一个本地变量也可能指向对象引用，这种情况下引用这个本地变量他是存在线程栈上，但是对象本身是存在堆上的，一个对象可能包含方法，这些方法可能包含本地变量
            这些本地变量它仍然是存在线程栈上的，即使这些方法所属的对象存放在堆上。一个对象的成员变量可能会随着这个对象自身存放到堆上，不管这成员变量是原始类型还是
            引用类型。静态成员变量跟随着类定义一起存放在堆上。存在堆上的对象可以被持有对象引用的线程访问。当一个线程可以访问一个对象的时候，他也可以访问这个对象的
            成员变量，如果两个线程同时调用一个对象的同一个方法，他们将都会访问这个对象的成员变量，但是每个线程都拥有了这个成员变量的私有拷贝。

Java内存模型-同步八种操作
    lock(锁定)：
        作用于主内存的变量，把一个变量标识为一条线程独占状态
    unlock(解锁)：
        作用于主内存的变量 ,把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定
    read(读取)：
        作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用
    load(载入)：
        作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中
    use(使用)：
        作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎
    assign(赋值)：
        作用于工作内存的变量，它把一个执行引擎接收到的值赋值给工作内存的变量
    store(存储)：
        作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作  
    write(写入)：
        作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中    
Java内存模型-同步规则
    如果要把一个变量从主内存中复制到工作内存，就需要按顺序地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。但Java内存模型
    只要求上述操作必须按顺序执行，而没有保障必须时联系执行。    
    不允许read和load、store和write操作之一单独出现。
    不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。
    不允许一个线程无原因地(没有发生过任何assign操作)把数据从工作内存同步回主内存中。
    一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化(load或assign)的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。
    一个变量在同一时刻只允许一条线程对其进行lock操作，单lock操作可以被同一条线程重复多次执行，多次执行lock，只有执行相同次数的lock操作，变量才会被解锁。lock和unlock必须成对出现。
    如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值。
    如果一个变量事先没有lock操作锁定，则不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量
    对一个变量执行unlock操作之前，必须先把此变量同步到主内存中(执行store和write操作)

并发的优势与风险
    优势：
        速度：
            同时处理多个请求，响应更快；复杂的操作可以分成多个进程同时进行
        设计：
            程序设计在某些情况下更简单，也可以有更多的选择
        资源利用：
            CPU能够在等待IO的时候做一些其他的事情
    风险：
        安全性：
            多个线程共享数据时可能会产生与期望不符的结果
        活跃性：
            某个操作无法继续进行下去时，就会发生活跃性问题。比如死锁、饥饿等问题
        性能：
            线程过多时会使得：CPU频繁切换，调度时间增多；同步机制；消耗过多内存              

总结：
    cup多级缓存：缓存一致性、乱序执行优化
    Java内存模型：JMM规定、抽象结构、同步八种操作及规则
    Java并发的优势与风险
        
